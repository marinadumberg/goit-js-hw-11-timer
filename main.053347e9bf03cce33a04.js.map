{"version":3,"sources":["webpack:///./index.js","webpack:///./timer.js"],"names":["refs","days","document","querySelector","hours","mins","secs","clockface","constructor","onTick","targetDate","this","intervalId","start","startTime","getTime","setInterval","currentTime","Date","now","deltaTime","time","getTimeComponents","stop","clearInterval","pad","Math","floor","value","String","padStart","textContent","selector"],"mappings":"kHAAA,4B,mBCCA,MAAMA,EAAO,CACTC,KAAMC,SAASC,cAAc,uBAC7BC,MAAMF,SAASC,cAAc,wBAC7BE,KAAMH,SAASC,cAAc,uBAC7BG,KAAMJ,SAASC,cAAc,uBAC7BI,UAAUL,SAASC,cAAc,mBA0CvB,IAtCd,MACIK,aAAY,OAACC,EAAD,WAAQC,IAChBC,KAAKC,WAAa,KAClBD,KAAKF,OAASA,EACdE,KAAKD,WAAaA,EAEtBG,QACI,MAAMC,EAAYH,KAAKD,WAAWK,UAElCJ,KAAKC,WAAWI,YAAY,KACxB,MAAMC,EAAcC,KAAKC,MAEnBC,EAAYN,EAAUG,EACtBI,EAAOV,KAAKW,kBAAkBF,GACpCT,KAAKF,OAAOY,IAGb,KAGPE,OACIC,cAAcb,KAAKC,YAGvBU,kBAAkBD,GAMlB,MAAO,CAACpB,KALKU,KAAKc,IAAIC,KAAKC,MAAMN,EAAO,QAK1BjB,MAJAO,KAAKc,IAAIC,KAAKC,MAAON,EAAO,MAAR,OAIbhB,KAHRM,KAAKc,IAAIC,KAAKC,MAAON,EAAO,KAAR,MAGNf,KAFdK,KAAKc,IAAIC,KAAKC,MAAON,EAAO,IAAe,OAI3DI,IAAIG,GACD,OAAOC,OAAOD,GAAOE,SAAS,EAAG,OAKJ,CAC7BrB,OAMJ,UAAyB,KAAER,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,IAC1CN,EAAKO,UAAUwB,YAAe,GAAE9B,KAAQG,KAASC,KAAQC,KANzD0B,SAAU,WACZtB,WAAY,IAAIQ,KAAK,kBAEjBL,U","file":"main.053347e9bf03cce33a04.js","sourcesContent":["import './styles.css';\nimport './timer';\n\n","\nconst refs = {\n    days: document.querySelector('[data-value=\"days\"]'),\n    hours:document.querySelector('[data-value=\"hours\"]'),\n    mins: document.querySelector('[data-value=\"mins\"]'),\n    secs: document.querySelector('[data-value=\"secs\"]'),\n    clockface:document.querySelector('[id=\"timer-1\"]')\n}\n\n\nclass CountdownTimer{\n    constructor({onTick,targetDate}) {\n        this.intervalId = null;\n        this.onTick = onTick;\n        this.targetDate = targetDate;\n    }\n    start() {\n        const startTime = this.targetDate.getTime();\n       \n        this.intervalId=setInterval(() => {\n            const currentTime = Date.now();\n\n            const deltaTime = startTime-currentTime;\n            const time = this.getTimeComponents(deltaTime);\n            this.onTick(time);\n            // updateClockface({ days, hours, mins, secs })\n    \n        }, 1000);\n    }\n\n    stop() {\n        clearInterval(this.intervalId);\n    }\n\n    getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return {days, hours, mins, secs};\n    }\n pad(value) {\n    return String(value).padStart(2, '0');\n}\n}\n\n\nconst timer = new CountdownTimer({\n    onTick: updateClockface,\n    selector: '#timer-1',\n  targetDate: new Date('Dec 31, 2021'),\n});\ntimer.start();\n\nfunction updateClockface({ days, hours, mins, secs}) {\n    refs.clockface.textContent = `${days}:${hours}:${mins}:${secs}`;\n}\n\n\n"],"sourceRoot":""}